<%- include('partials/dashboardhead') %>


  <main class="md:max-w-7xl md:ml-64 md:px-2">
    <main class="space-y-10">
      <section id="trade" class="section mt-16">
        <h2 class="text-lg fixed w-full bg-gray-900 md:py-4 py-2 md:text-xl text-center md:text-start font-semibold ">
          Trade</h2>
        <div class="bg-gray-800 p-4 rounded shadow pt-12 md:pt-20">
          <div class="tradingview-widget-container">
            <div class="tradingview-widget-container__widget"></div>
            <script type="text/javascript"
              src="https://s3.tradingview.com/external-embedding/embed-widget-ticker-tape.js" async>
                {
                  "symbols": [
                    {
                      "proName": "FOREXCOM:SPXUSD",
                      "title": "S&P 500 Index"
                    },
                    {
                      "proName": "BITSTAMP:BTCUSD",
                      "title": "Bitcoin"
                    },
                    {
                      "proName": "TRADENATION:SOLANA",
                      "title": "Solana"
                    },
                    {
                      "proName": "BITSTAMP:ETHUSD",
                      "title": "Ethereum"
                    },
                    {
                      "proName": "OANDA:XAUUSD",
                      "title": "Gold"
                    },
                    {
                      "proName": "SPARKS:SILVER",
                      "title": "Silver"
                    },
                    {
                      "proName": "TVC:USOIL",
                      "title": "Crude"
                    },
                    {
                      "proName": "VANTAGE:GAS",
                      "title": "Gas"
                    },
                    {
                      "proName": "CAPITALCOM:GASOLINE",
                      "title": "Gasoline"
                    },
                    {
                      "proName": "ACTIVTRADES:SUGARN2025",
                      "title": "Sugar"
                    }
                  ],
                    "colorTheme": "dark",
                      "locale": "en",
                        "largeChartUrl": "",
                          "isTransparent": true,
                            "showSymbolLogo": true,
                              "displayMode": "adaptive"
                }
              </script>
          </div>
          <label for="marketSelect" class="block mb-2 text-sm font-medium">Select Market:</label>
          <select id="marketSelect" onchange="loadChart(this.value)"
            class="w-full p-2 bg-gray-900 border border-gray-700 rounded text-white">
            <option value="">-- Select Market --</option>
            <option value="COMEX:GC1!">Gold</option>
            <option value="TVC:SILVER">Silver</option>
            <option value="NYMEX:CL1!">Crude Oil</option>
            <option value="NYMEX:NG1!">Natural Gas</option>
            <option value="ICEUSA:SB1!">Sugar (unavailable) </option>
            <option value="NYMEX:RB1!">Gasoline</option>
            <option value="BINANCE:BTCUSDT">Bitcoin</option>
            <option value="BINANCE:ETHUSDT">Ethereum</option>
            <option value="TVC:SPX">S&P 500 Index</option>
          </select>

          <input type="hidden" name="" id="balance" value="<%= user.balance %>">
          <input type="hidden" name="" id="email" value="<%= user.email %>">

          <div id="chartContainer" class="h-96 mt-6 bg-gray-700 rounded flex items-center justify-center text-gray-400">
            <span>Select a market to view its chart.</span>
          </div>

          <!-- Trade Form Below Chart -->
          <div class="mt-6 space-y-4">
            <div>
              <label for="tradeTime" class="block text-sm font-medium mb-1">Trade Time</label>
              <select id="tradeTime" class="w-full p-2 bg-gray-900 border border-gray-700 rounded text-white">
                <option value="30s">30 seconds</option>
                <option value="1m">1 minute</option>
                <option value="2m">2 minutes</option>
                <option value="5m">5 minutes</option>
                <option value="10m">10 minutes</option>
              </select>
            </div>

            <div>
              <label for="leverage" class="block text-sm font-medium mb-1">Leverage</label>
              <select id="leverage" class="w-full p-2 bg-gray-900 border border-gray-700 rounded text-white">
                <option value="1x">1x</option>
                <option value="2x">2x</option>
                <option value="3x">3x</option>
                <option value="5x">5x</option>
              </select>
            </div>
            <div>
              <label for="amount" class="block text-sm font-medium mb-1">Amount</label>
              <input type="number" id="amount" value="100"
                class="w-full p-2 bg-gray-900 border border-gray-700 rounded text-white" />
            </div>

            <div class="flex gap-4 pt-2">
              <button type="button" class="flex-1 bg-green-600 hover:bg-green-700 text-white py-2 rounded"
                id="buy">Buy</button>
              <button type="button" class="flex-1 bg-red-600 hover:bg-red-700 text-white py-2 rounded"
                id="sell">Sell</button>
            </div>
          </div>
        </div>
      </section>
    </main>
  </main>
  <script src="/js/userdashboard.js"></script>
  <script src="/js/alert.js"></script>
  <script>
    const leverageSelect = document.getElementById('leverage');
    const amountInput = document.getElementById('amount');

    leverageSelect.addEventListener('change', () => {
      let selectedValue = leverageSelect.value;
      let minAmount = 0;

      switch (selectedValue) {
        case '1x':
          minAmount = 100;
          break;
        case '2x':
          minAmount = 200;
          break;
        case '3x':
          minAmount = 500;
          break;
        case '4x':
          minAmount = 1000;
          break;
        case '5x':
          minAmount = 1500;
          break;
      }

      amountInput.min = minAmount;
      amountInput.value = minAmount;
    });

    let buy1 = document.getElementById('buy')
    let sell1 = document.getElementById('sell')

    buy1.addEventListener('click', async () => {
      let marketSelect1 = document.getElementById('marketSelect').value.trim();
      let tradeTime1 = document.getElementById('tradeTime').value.trim();
      let leverage1 = document.getElementById('leverage').value.trim();
      let amount1 = document.getElementById('amount').value.trim();
      let balance = document.getElementById('balance').value.trim();
      let email = document.getElementById('email').value.trim();

      if (
        !marketSelect1 ||
        !tradeTime1 ||
        !leverage1 ||
        !amount1
      ) {
        showAlert("All Fields Are Required", "error");
        return;
      }

      let cdate = new Date().toISOString().slice(0, 10);
      let tType = 'Buy';

      amount1 = Number(amount1);
      balance = Number(balance);

      if (amount1 > balance) {
        alert("insufficient funds")
        return false
      }

      balance -= amount1

      const response = await fetch("/trade", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ marketSelect1, tradeTime1, leverage1, amount1, cdate, tType, balance, email }),
      });

      const data = await response.json();

      if (response.ok) {
        showAlert(data.message || "Trade Started", "success");
        window.location.href = "/trades";
      } else {
        showAlert(data.error || "Error Starting Trade", "error");

        if (data.redirect) {
          setTimeout(() => {
            window.location.href = data.redirect;
          }, data.delay || 10000);
        }
      }
    })

    sell1.addEventListener('click', async () => {
      let marketSelect1 = document.getElementById('marketSelect').value.trim();
      let tradeTime1 = document.getElementById('tradeTime').value.trim();
      let leverage1 = document.getElementById('leverage').value.trim();
      let amount1 = document.getElementById('amount').value.trim();
      let balance = document.getElementById('balance').value.trim();
      let email = document.getElementById('email').value.trim();

      if (
        !marketSelect1 ||
        !tradeTime1 ||
        !leverage1 ||
        !amount1
      ) {
        showAlert("All Fields Are Required", "error");
        return;
      }

      let cdate = new Date().toISOString().slice(0, 10);
      let tType = 'Sell';

      amount1 = Number(amount1);
      balance = Number(balance);

      if (amount1 > balance) {
        alert("insufficient funds")
        return false
      }

      balance -= amount1

      const response = await fetch("/trade", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ marketSelect1, tradeTime1, leverage1, amount1, cdate, tType, balance, email }),
      });

      const data = await response.json();

      if (response.ok) {
        showAlert(data.message || "Trade Started", "success");
        window.location.href = "/trades";
      } else {
        showAlert(data.error || "Error Starting Trade", "error");

        if (data.redirect) {
          setTimeout(() => {
            window.location.href = data.redirect;
          }, data.delay || 10000);
        }
      }
    })

  </script>
  <%- include('partials/footer') %>