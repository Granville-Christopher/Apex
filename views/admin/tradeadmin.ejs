<!DOCTYPE html>
<html lang="en" class="dark">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.tailwindcss.com" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script>
        tailwind.config = {
            darkMode: 'class'
        }
    </script>
</head>
<body class="bg-gray-900 text-white dark:text-white">
    <%- include('./partials/header.ejs') %>
    
    <div class="container mx-auto px-4 py-8 mt-16">
        <!-- Page Header -->
        <div class="flex items-center justify-between mb-8">
            <div>
                <h1 class="text-3xl font-bold text-white mb-2">Trade Management</h1>
                <p class="text-gray-400">Manage all trades in the system</p>
            </div>
            <div class="flex items-center space-x-4">
                <span class="text-sm text-gray-400">Total Trades: <%= trades.length %></span>
                <button onclick="refreshTrades()" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition duration-200">
                    <i class="fas fa-sync-alt mr-2"></i>Refresh
                </button>
            </div>
        </div>

        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div class="bg-gray-800 rounded-lg p-6">
                <div class="flex items-center">
                    <div class="w-12 h-12 bg-green-500 rounded-lg flex items-center justify-center mr-4">
                        <i class="fas fa-chart-line text-white"></i>
                    </div>
                    <div>
                        <p class="text-sm text-gray-400">Active Trades</p>
                        <p class="text-2xl font-bold text-white"><%= trades.filter(t => t.status === 'active').length %></p>
                    </div>
                </div>
            </div>
            
            <div class="bg-gray-800 rounded-lg p-6">
                <div class="flex items-center">
                    <div class="w-12 h-12 bg-red-500 rounded-lg flex items-center justify-center mr-4">
                        <i class="fas fa-times-circle text-white"></i>
                    </div>
                    <div>
                        <p class="text-sm text-gray-400">Closed Trades</p>
                        <p class="text-2xl font-bold text-white"><%= trades.filter(t => t.status === 'closed').length %></p>
                    </div>
                </div>
            </div>
            
            <div class="bg-gray-800 rounded-lg p-6">
                <div class="flex items-center">
                    <div class="w-12 h-12 bg-yellow-500 rounded-lg flex items-center justify-center mr-4">
                        <i class="fas fa-dollar-sign text-white"></i>
                    </div>
                    <div>
                        <p class="text-sm text-gray-400">Total Profit</p>
                        <p class="text-2xl font-bold text-white">$<%= trades.reduce((sum, t) => sum + (t.profit || 0), 0).toFixed(2) %></p>
                    </div>
                </div>
            </div>
            
            <div class="bg-gray-800 rounded-lg p-6">
                <div class="flex items-center">
                    <div class="w-12 h-12 bg-purple-500 rounded-lg flex items-center justify-center mr-4">
                        <i class="fas fa-coins text-white"></i>
                    </div>
                    <div>
                        <p class="text-sm text-gray-400">Total Volume</p>
                        <p class="text-2xl font-bold text-white">$<%= trades.reduce((sum, t) => sum + (t.amount || 0), 0).toFixed(2) %></p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Trades Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <% trades.forEach((trade, index) => { %>
            <div class="bg-gray-800 rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition duration-300">
                <!-- Trade Header -->
                <div class="p-4 border-b border-gray-700">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <div class="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center mr-3">
                                <i class="fas fa-chart-bar text-white"></i>
                            </div>
                            <div>
                                <h3 class="font-semibold text-white"><%= trade.symbol || trade.pair || 'N/A' %></h3>
                                <p class="text-sm text-gray-400"><%= trade.type || 'N/A' %></p>
                            </div>
                        </div>
                        <span class="px-2 py-1 text-xs rounded-full <%= trade.status === 'active' ? 'bg-green-500' : trade.status === 'closed' ? 'bg-red-500' : 'bg-yellow-500' %> text-white">
                            <%= trade.status || 'N/A' %>
                        </span>
                    </div>
                </div>

                <!-- Trade Details -->
                <div class="p-4">
                    <div class="space-y-3">
                        <div class="flex justify-between">
                            <span class="text-sm text-gray-400">Amount:</span>
                            <span class="text-white font-medium">$<%= (trade.amount || 0).toFixed(2) %></span>
                        </div>
                        
                        <div class="flex justify-between">
                            <span class="text-sm text-gray-400">Entry Price:</span>
                            <span class="text-white font-medium">$<%= (trade.entryPrice || 0).toFixed(4) %></span>
                        </div>
                        
                        <div class="flex justify-between">
                            <span class="text-sm text-gray-400">Current Price:</span>
                            <span class="text-white font-medium">$<%= (trade.currentPrice || 0).toFixed(4) %></span>
                        </div>
                        
                        <div class="flex justify-between">
                            <span class="text-sm text-gray-400">Profit/Loss:</span>
                            <span class="text-white font-medium <%= (trade.profit || 0) >= 0 ? 'text-green-400' : 'text-red-400' %>">
                                $<%= (trade.profit || 0).toFixed(2) %>
                            </span>
                        </div>
                        
                        <div class="flex justify-between">
                            <span class="text-sm text-gray-400">Date:</span>
                            <span class="text-white font-medium"><%= new Date(trade.createdAt || trade.date).toLocaleDateString() %></span>
                        </div>
                    </div>
                </div>

                <!-- Trade Actions -->
                <div class="p-4 border-t border-gray-700 flex space-x-2">
                    <button onclick="viewTrade('<%= trade._id %>')" class="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-3 rounded text-sm transition duration-200">
                        <i class="fas fa-eye mr-1"></i>View
                    </button>
                    <button onclick="deleteTrade('<%= trade._id %>')" class="flex-1 bg-red-600 hover:bg-red-700 text-white py-2 px-3 rounded text-sm transition duration-200">
                        <i class="fas fa-trash mr-1"></i>Delete
                    </button>
                </div>
            </div>
            <% }) %>
        </div>

        <!-- Empty State -->
        <% if (trades.length === 0) { %>
        <div class="flex justify-center items-center h-96">
            <div class="text-center">
                <i class="fas fa-chart-bar text-gray-600 text-6xl mb-4"></i>
                <h3 class="text-xl font-semibold text-gray-400 mb-2">No trades found</h3>
                <p class="text-gray-500">There are no trades to display at the moment</p>
            </div>
        </div>
        <% } %>
    </div>

    <%- include('./partials/footer.ejs') %>

    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-gray-800 rounded-lg p-6 max-w-md mx-4">
            <h3 class="text-lg font-semibold text-white mb-4">Confirm Delete</h3>
            <p class="text-gray-300 mb-6">Are you sure you want to delete this trade? This action cannot be undone.</p>
            <div class="flex justify-end space-x-4">
                <button onclick="closeDeleteModal()" class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded transition duration-200">
                    Cancel
                </button>
                <button id="confirmDelete" class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded transition duration-200">
                    Delete
                </button>
            </div>
        </div>
    </div>

    <script>
        let currentTradeId = null;

        // View trade details
        function viewTrade(tradeId) {
            window.location.href = `/admin/trade/${tradeId}`;
        }

        // Delete trade
        function deleteTrade(tradeId) {
            currentTradeId = tradeId;
            document.getElementById('deleteModal').classList.remove('hidden');
        }

        // Close delete modal
        function closeDeleteModal() {
            document.getElementById('deleteModal').classList.add('hidden');
            currentTradeId = null;
        }

        // Confirm delete
        document.getElementById('confirmDelete').addEventListener('click', async function() {
            if (!currentTradeId) return;

            try {
                const response = await fetch(`/api/admin/trades/${currentTradeId}`, {
                    method: 'DELETE'
                });

                const data = await response.json();

                if (response.ok) {
                    // Remove the trade card from DOM
                    const tradeCard = document.querySelector(`[onclick*="${currentTradeId}"]`).closest('.bg-gray-800');
                    if (tradeCard) {
                        tradeCard.style.transition = 'all 0.3s ease';
                        tradeCard.style.transform = 'scale(0)';
                        tradeCard.style.opacity = '0';
                        setTimeout(() => {
                            tradeCard.remove();
                            updateStats();
                        }, 300);
                    }
                    
                    closeDeleteModal();
                    showNotification('Trade deleted successfully', 'success');
                } else {
                    showNotification(data.error || 'Failed to delete trade', 'error');
                }
            } catch (error) {
                console.error('Error deleting trade:', error);
                showNotification('Network error. Please try again.', 'error');
            }
        });

        // Update stats after deletion
        function updateStats() {
            // This would typically be handled by the backend
            // For now, we'll just refresh the page
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        }

        // Refresh trades
        function refreshTrades() {
            window.location.reload();
        }

        // Show notification
        function showNotification(message, type) {
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 px-6 py-3 rounded-lg text-white z-50 ${
                type === 'success' ? 'bg-green-600' : 'bg-red-600'
            }`;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

        // Auto-refresh every 30 seconds
        setInterval(() => {
            // This could be implemented to fetch new trades without full page reload
        }, 30000);
    </script>
</body>
</html>
